{"version":3,"sources":["components/ProblemList.jsx","App.js","serviceWorker.js","index.js"],"names":["ProblemList","useState","problems","setProblems","useEffect","a","axios","get","response","Object","values","data","title","columns","field","render","p","className","href","slug","replace","toUpperCase","difficulty","customFilterAndSearch","term","rowData","T","likes","dislikes","rate","acceptance","submitted","accepted","options","search","filtering","pageSize","pageSizeOptions","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAwHeA,G,OAnHK,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACjBC,EADiB,KACPC,EADO,KAUxB,OAPAC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEACwBC,IAAMC,IAAI,mBADlC,OACOC,EADP,OAECL,EAAYM,OAAOC,OAAOF,EAASG,OAFpC,0CAAD,KAIC,IAGD,6BACE,kBAAC,IAAD,CACEC,MAAO,mBACPC,QAAS,CACP,CAAED,MAAO,KAAME,MAAO,iBACtB,CACEF,MAAO,QACPE,MAAO,OACPC,OAAQ,SAACC,GACP,OACE,uBACEC,UAAU,eACVC,KAAI,wCAAmCF,EAAEG,OAEzC,0BAAMF,UAAW,SACdD,EAAEG,KAAKC,QAAQ,KAAM,KAAKC,kBAMrC,CACET,MAAO,aACPE,MAAO,aACPC,OAAQ,SAACC,GACP,OAAqB,IAAjBA,EAAEM,WACG,0BAAML,UAAW,mBAAjB,QACmB,IAAjBD,EAAEM,WACJ,0BAAML,UAAW,qBAAjB,UAEA,0BAAMA,UAAW,mBAAjB,SAGXM,sBAAuB,SAACC,EAAMC,GAC5B,IAAMH,EAAaG,EAAQH,WACrBI,EAAIF,EAAKH,cACf,MAAU,SAANK,EACoB,IAAfJ,EAEC,WAANI,EACoB,IAAfJ,EAEC,SAANI,GACoB,IAAfJ,IAMb,CACEV,MAAO,QACPE,MAAO,QACPS,sBAAuB,SAACC,EAAMC,GAC5B,OAAOA,EAAQE,MAAQH,IAG3B,CACEZ,MAAO,WACPE,MAAO,WACPS,sBAAuB,SAACC,EAAMC,GAC5B,OAAOA,EAAQG,SAAWJ,IAG9B,CACEZ,MAAO,OACPE,MAAO,OACPS,sBAAuB,SAACC,EAAMC,GAC5B,OAAOA,EAAQI,KAAOL,IAG1B,CACEZ,MAAO,aACPE,MAAO,aACPS,sBAAuB,SAACC,EAAMC,GAC5B,OAAOA,EAAQK,WAAaN,IAGhC,CACEZ,MAAO,YACPE,MAAO,YACPS,sBAAuB,SAACC,EAAMC,GAC5B,OAAOA,EAAQM,UAAYP,IAG/B,CACEZ,MAAO,WACPE,MAAO,WACPS,sBAAuB,SAACC,EAAMC,GAC5B,OAAOA,EAAQO,SAAWR,KAIhCb,KAAMT,EACN+B,QAAS,CACPC,QAAQ,EACRC,WAAW,EACXC,SAAU,IACVC,gBAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,WCrGjCC,MARf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCKcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS7B,OACP,kBAAC,IAAM8B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35b07f4f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport \"./ProblemList.css\";\n\nconst ProblemList = () => {\n  const [problems, setProblems] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const response = await axios.get(\"./problems.json\");\n      setProblems(Object.values(response.data));\n    })();\n  }, []);\n\n  return (\n    <div>\n      <MaterialTable\n        title={\"Leetcode Scouter\"}\n        columns={[\n          { title: \"ID\", field: \"problemNumber\" },\n          {\n            title: \"Title\",\n            field: \"slug\",\n            render: (p) => {\n              return (\n                <a\n                  className=\"problem-link\"\n                  href={`https://leetcode.com/problems/${p.slug}`}\n                >\n                  <span className={\"title\"}>\n                    {p.slug.replace(/-/g, \" \").toUpperCase()}\n                  </span>\n                </a>\n              );\n            },\n          },\n          {\n            title: \"Difficulty\",\n            field: \"difficulty\",\n            render: (p) => {\n              if (p.difficulty === 1) {\n                return <span className={\"difficulty easy\"}>EASY</span>;\n              } else if (p.difficulty === 2) {\n                return <span className={\"difficulty medium\"}>MEDIUM</span>;\n              } else {\n                return <span className={\"difficulty hard\"}>HARD</span>;\n              }\n            },\n            customFilterAndSearch: (term, rowData) => {\n              const difficulty = rowData.difficulty;\n              const T = term.toUpperCase();\n              if (T === \"EASY\") {\n                return difficulty === 1;\n              }\n              if (T === \"MEDIUM\") {\n                return difficulty === 2;\n              }\n              if (T === \"HARD\") {\n                return difficulty === 3;\n              }\n\n              return false;\n            },\n          },\n          {\n            title: \"Likes\",\n            field: \"likes\",\n            customFilterAndSearch: (term, rowData) => {\n              return rowData.likes > term;\n            },\n          },\n          {\n            title: \"Dislikes\",\n            field: \"dislikes\",\n            customFilterAndSearch: (term, rowData) => {\n              return rowData.dislikes < term;\n            },\n          },\n          {\n            title: \"Rate\",\n            field: \"rate\",\n            customFilterAndSearch: (term, rowData) => {\n              return rowData.rate > term;\n            },\n          },\n          {\n            title: \"Acceptance\",\n            field: \"acceptance\",\n            customFilterAndSearch: (term, rowData) => {\n              return rowData.acceptance > term;\n            },\n          },\n          {\n            title: \"Submitted\",\n            field: \"submitted\",\n            customFilterAndSearch: (term, rowData) => {\n              return rowData.submitted > term;\n            },\n          },\n          {\n            title: \"Accepted\",\n            field: \"accepted\",\n            customFilterAndSearch: (term, rowData) => {\n              return rowData.accepted > term;\n            },\n          },\n        ]}\n        data={problems}\n        options={{\n          search: true,\n          filtering: true,\n          pageSize: 100,\n          pageSizeOptions: [100, 200, 400, 800, 3000],\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ProblemList;\n","import React from \"react\";\nimport \"./App.css\";\nimport ProblemList from \"./components/ProblemList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProblemList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}